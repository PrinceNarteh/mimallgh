generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id              String    @id @default(cuid())
  firstName       String
  lastName        String
  middleName      String?
  address         String?
  phoneNumber     String
  alternateNumber String?
  nationality     String
  email           String    @unique
  password        String
  image           String?
  cardType        String?
  cardNumber      String?
  active          Boolean   @default(true)
  role            Role
  level           Level?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  accounts        Account[]
  sessions        Session[]
  shop            Shop?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Shop {
  id              String    @id @default(cuid())
  name            String
  description     String    @db.Text
  location        String
  address         String?
  phoneNumber     String
  alternateNumber String?
  whatsappNumber  String?
  instagramHandle String?
  facebookHandle  String?
  openingTime     String
  closingTime     String
  ownerId         String    @unique
  branches        Branch[]
  products        Product[]
  owner           User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Branch {
  id          String  @id @default(cuid())
  location    String
  address     String?
  phoneNumber String
  shopId      String?
  Shop        Shop?   @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId], map: "Branch_shopId_fkey")
}

model Image {
  id         String   @id @default(cuid())
  public_id  String
  secure_url String
  productId  String?
  Product    Product? @relation(fields: [productId], references: [id])

  @@index([productId], map: "Image_productId_fkey")
}

model Product {
  id                 String   @id @default(cuid())
  title              String
  description        String   @db.LongText
  price              Float
  discountPercentage Float    @default(0)
  stock              Int      @default(0)
  brand              String
  category           Category
  shopId             String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  images             Image[]
  shop               Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId], map: "Product_shopId_fkey")
}

enum Role {
  ADMIN
  USER
  SHOP_OWNER
}

enum Level {
  LEVEL_ONE
  LEVEL_TWO
  LEVEL_THREE
  SUPER_USER
}

enum Category {
  FOOD
  FASHION_AND_WEARS
  GROCERY_AND_GENERAL
  HEALTH_AND_WELLNESS
  HOME_AND_ELECTRICAL_APPLIANCES
  PERSONAL_SERVICES
  PRINTING_AND_STATIONERY
  TECH
}
