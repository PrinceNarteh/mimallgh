// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    ADMIN
    USER
    SHOP_OWNER
}

enum Level {
    LEVEL_ONE
    LEVEL_TWO
    LEVEL_THREE
    SUPER_USER
}

model User {
    id              String    @id @default(cuid())
    firstName       String
    lastName        String
    middleName      String?
    address         String?
    phoneNumber     String
    alternateNumber String?
    nationality     String
    email           String    @unique
    password        String
    image           String?
    cardType        String?
    cardNumber      String?
    active          Boolean   @default(true)
    role            Role
    level           Level?
    accounts        Account[]
    sessions        Session[]
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    shop            Shop?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Shop {
    id              String    @id @default(cuid())
    name            String
    description     String
    location        String
    address         String?
    phoneNumber     String
    alternateNumber String?
    whatsappNumber  String?
    instagramHandle String?
    facebookHandle  String?
    openingTime     String
    closingTime     String
    ownerId         String    @unique
    owner           User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    products        Product[]
    branches        Branch[]
}

model Branch {
    id          String  @id @default(cuid())
    location    String
    address     String?
    phoneNumber String
    Shop        Shop?   @relation(fields: [shopId], references: [id], onDelete: Cascade)
    shopId      String?
}

enum Category {
    ACCOMMODATIONS_AND_BUILDING
    FASHION_AND_WEARS
    FOOD
    FURNITURE
    GROCERY_AND_GENERAL
    HEALTH_AND_WELLNESS
    HOME_AND_ELECTRICALS
    MONEY_AND_ENERGY
    PERSONAL_CARE_AND_BEAUTY
    RECREATION
    STATIONERY_AND_PRINTING
    TECH
    TRANSPORT_AND_MACHINE
}

model Product {
    id                 String   @id @default(cuid())
    title              String
    description        String
    price              Float
    discountPercentage Float    @default(0)
    stock              Int      @default(0)
    brand              String
    category           Category
    images             String
    shopId             String
    shop               Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
}
